package com;
import java.util.List;
import java.util.ArrayList;

import com.ast.mutable.Identifier;
import com.ast.expressions.Expression;
import com.ast.expressions.Subexpression;
import com.ast.expressions.Call;
import com.ast.expressions.binary.*;
import com.ast.expressions.unary.*;
import com.ast.expressions.literals.*;
import com.ast.function.*;
import com.ast.statements.*;
import com.ast.types.*;
import com.ast.*;

parser code {:
    Lexer lexer;

    public Parser(Lexer lexer) {
        super(lexer);
        this.lexer = lexer;
    }
:}

scan with {: return lexer.next_token(); :};

terminal PLUS, MINUS, TIMES, DIVIDE, MODULO;
terminal LOG_AND, LOG_OR, LOG_NOT;
terminal EQUALS, LESS_THAN, LESS_THAN_EQUALS, NOT_EQUALS;
terminal LPAREN, RPAREN;
terminal LBRACE, RBRACE;

terminal COMMA;
terminal SEMICOLON;

terminal IF, WHILE, RETURN;

terminal INPUT, OUTPUT;

terminal Integer INTEGER_LITERAL;
terminal Double DOUBLE_LITERAL;
terminal Character CHARACTER_LITERAL;
terminal Boolean BOOLEAN_LITERAL;

terminal INTEGER_TYPE, DOUBLE_TYPE, CHARACTER_TYPE, BOOLEAN_TYPE;
terminal Identifier IDENTIFIER;

non terminal List<Statement> statement_list;
non terminal Statement statement;

non terminal ParamDeclaration param_decl;
non terminal ParamDeclarationList param_decl_list;
non terminal List<ParamDeclaration> remaining_param_list;

non terminal TypeDeclaration type;

non terminal VariableDeclaration vardecl;

non terminal Function function;
non terminal List<Function> function_list;

non terminal Expression expression;

non terminal If if_block;
non terminal While while_block;
non terminal Call function_call;
non terminal List<Expression> call_param_list;
non terminal List<Expression> remaining_call_param_list;

non terminal Program program;

precedence left LOG_OR;
precedence left LOG_AND;
precedence left EQUALS, LESS_THAN, LESS_THAN_EQUALS, NOT_EQUALS;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE, MODULO;

start with program;

program ::= function_list:fl {: RESULT = new Program(flleft, flright, fl); :};

function_list ::= function:f function_list:fl {:
                                                  fl.add(0, f);
                                                  RESULT = fl;
                                              :}
                  |
                  {: RESULT = new ArrayList<Function>(); :}
                  ;

function ::= type:t IDENTIFIER:i LPAREN param_decl_list:pdl RPAREN LBRACE statement_list:sl RBRACE {:
                             RESULT = new Function(tleft, tright, t, i, pdl, new Block(slleft, slright, sl));
                         :};

type ::= INTEGER_TYPE:it   {: RESULT = new TypeDeclaration(itleft, itright, Type.INTEGER); :}
         |
         DOUBLE_TYPE:dt    {: RESULT = new TypeDeclaration(dtleft, dtright, Type.DOUBLE); :}
         |
         CHARACTER_TYPE:ct {: RESULT = new TypeDeclaration(ctleft, ctright, Type.CHARACTER); :}
         |
         BOOLEAN_TYPE:bt {: RESULT = new TypeDeclaration(btleft, btright, Type.BOOLEAN); :}
         ;

param_decl ::= type:t IDENTIFIER:id {: RESULT = new ParamDeclaration(tleft, tright, t, id); :}
               ;

param_decl_list ::= param_decl:p remaining_param_list:rl {: 
        List<ParamDeclaration> params = new ArrayList<>();
        params.add(p);
        for(ParamDeclaration param : rl) {
            params.add(param);
        }
        RESULT = new ParamDeclarationList(pleft, pright, params);
    :}
    |
    {: RESULT = new ParamDeclarationList(-1, -1, new ArrayList<ParamDeclaration>()); :};

remaining_param_list ::= COMMA param_decl:pd remaining_param_list:rpl
                    {:
                        rpl.add(0, pd);
                        RESULT = rpl;
                    :}
                    |
                    {: RESULT = new ArrayList<ParamDeclaration>(); :}
                    ;

statement_list ::= statement:s statement_list:sl
                   {:
                       sl.add(0, s);
                       RESULT = sl;
                   :}
                   |
                   {: RESULT = new ArrayList<Statement>(); :}
                   ;

statement ::= vardecl:v SEMICOLON {: RESULT = v; :}
              |
              IDENTIFIER:i EQUALS expression:e SEMICOLON {: RESULT = new Assign(ileft, iright, i, e); :}
              |
              if_block:ib {: RESULT = ib; :}
              |
              while_block:wb {: RESULT = wb; :}
              |
              function_call:fc SEMICOLON {: RESULT = fc; :}
              |
              RETURN:r expression:e SEMICOLON {: RESULT = new Return(rleft, rright, e); :}
              |
              INPUT:ip LPAREN IDENTIFIER:i RPAREN SEMICOLON {: RESULT = new Input(ipleft, ipright, i); :}
              |
              OUTPUT:op LPAREN expression:e RPAREN SEMICOLON {: RESULT = new Output(opleft, opright, e); :}
              ;

vardecl ::= type:t IDENTIFIER:i {: RESULT = new VariableDeclaration(tleft, tright, t, i); :};

expression ::= expression:lhs PLUS expression:rhs {: RESULT = new Add(lhsleft, lhsright, lhs, rhs); :}
               |
               expression:lhs MINUS expression:rhs {: RESULT = new Subtract(lhsleft, lhsright, lhs, rhs); :}
               |
               expression:lhs TIMES expression:rhs {: RESULT = new Multiply(lhsleft, lhsright, lhs, rhs); :}
               |
               expression:lhs DIVIDE expression:rhs {: RESULT = new Divide(lhsleft, lhsright, lhs, rhs); :}
               |
               expression:lhs MODULO expression:rhs {: RESULT = new Modulo(lhsleft, lhsright, lhs, rhs); :}
               |
               expression:lhs LOG_AND expression:rhs {: RESULT = new And(lhsleft, lhsright, lhs, rhs); :}
               |
               expression:lhs LOG_OR expression:rhs {: RESULT = new Or(lhsleft, lhsright, lhs, rhs); :}
               |
               LOG_NOT:ln expression:e {: RESULT = new Not(lnleft, lnright, e); :}
               |
               LPAREN:l expression:e RPAREN {: RESULT = new Subexpression(lleft, lright, e); :}
               |
               expression:lhs EQUALS expression:rhs {: RESULT = new Equals(lhsleft, lhsright, lhs, rhs); :}
               |
               expression:lhs LESS_THAN expression:rhs {: RESULT = new LessThan(lhsleft, lhsright, lhs, rhs); :}
               |
               expression:lhs LESS_THAN_EQUALS expression:rhs {: RESULT = new LessThanOrEquals(lhsleft, lhsright, lhs, rhs); :}
               |
               expression:lhs NOT_EQUALS expression:rhs {: RESULT = new NotEquals(lhsleft, lhsright, lhs, rhs); :}
               |
               function_call:fc {: RESULT = fc; :}
               |
               IDENTIFIER:i {: RESULT = i; :}
               |
               INTEGER_LITERAL:il {: RESULT = new IntLiteral(illeft, ilright, il); :}
               |
               DOUBLE_LITERAL:dl {: RESULT = new DoubleLiteral(dlleft, dlright, dl); :}
               |
               CHARACTER_LITERAL:cl {: RESULT = new CharLiteral(clleft, clright, cl); :}
               |
               BOOLEAN_LITERAL:bl {: RESULT = new BoolLiteral(blleft, blright, bl); :}
               ;

if_block ::= IF:i LPAREN expression:e RPAREN LBRACE statement_list:sl RBRACE
             {: RESULT = new If(ileft, iright, e, new Block(slleft, slright, sl)); :};

while_block ::= WHILE:w LPAREN expression:e RPAREN LBRACE statement_list:sl RBRACE
                {: RESULT = new While(wleft, wright, e, new Block(slleft, slright, sl)); :};

function_call ::= IDENTIFIER:i LPAREN call_param_list:cpl RPAREN
                  {: RESULT = new Call(ileft, iright, i, cpl); :};

call_param_list ::= expression:e remaining_call_param_list:rcpl
                    {: rcpl.add(0, e); RESULT = rcpl; :}
                    |
                    {: RESULT = new ArrayList<Expression>(); :}
                    ;

remaining_call_param_list ::= COMMA expression:e remaining_call_param_list:rcpl
                              {: rcpl.add(0, e); RESULT = rcpl; :}
                              |
                              {: RESULT = new ArrayList<Expression>(); :}
                              ;
