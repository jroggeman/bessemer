package com;
import java.util.List;
import java.util.ArrayList;

parser code {:
    Lexer lexer;

    public Parser(Lexer lexer) {
        super(lexer);
        this.lexer = lexer;
    }
:}

scan with {: return lexer.next_token(); :};

terminal PLUS, MINUS, TIMES, DIVIDE, MODULO;
terminal LPAREN, RPAREN;
terminal LBRACE, RBRACE;
terminal EQUALS;

terminal COMMA;
terminal SEMICOLON;

terminal Integer INTEGER_LITERAL;
terminal Double DOUBLE_LITERAL;
terminal Character CHARACTER_LITERAL;

terminal INTEGER_TYPE, DOUBLE_TYPE, CHARACTER_TYPE;
terminal Identifier IDENTIFIER;

non terminal List<Statement> statement_list;
non terminal Statement statement;

non terminal ParamDeclaration param_decl;
non terminal ParamDeclarationList param_decl_list;
non terminal List<ParamDeclaration> remaining_param_list;

non terminal Type type;

non terminal VariableDeclaration vardecl;

non terminal Function function;
non terminal List<Function> function_list;

non terminal Expression expression;
non terminal Add add_expression;
non terminal Subtract subtract_expression;
non terminal Multiply multiply_expression;
non terminal Divide divide_expression;
non terminal Modulo modulo_expression;

non terminal Program program;

precedence left PLUS;

start with program;

program ::= function_list:fl {: RESULT = new Program(fl); :};

function_list ::= function:f function_list:fl {:
                                                  fl.add(f);
                                                  RESULT = fl;
                                              :}
                  |
                  {: RESULT = new ArrayList<Function>(); :}
                  ;

function ::= type:t IDENTIFIER:i LPAREN param_decl_list:pdl RPAREN LBRACE statement_list:sl RBRACE {:
                             RESULT = new Function(t, i, pdl, sl);
                         :};

type ::= INTEGER_TYPE   {: RESULT = new IntegerType(); :}
         |
         DOUBLE_TYPE    {: RESULT = new DoubleType(); :}
         |
         CHARACTER_TYPE {: RESULT = new CharacterType(); :}
         ;

param_decl ::= type:t IDENTIFIER:id {: RESULT = new ParamDeclaration(t, id); :}
               ;

param_decl_list ::= param_decl:p remaining_param_list:rl {: 
        List<ParamDeclaration> params = new ArrayList<>();
        params.add(p);
        for(ParamDeclaration param : rl) {
            params.add(param);
        }
        RESULT = new ParamDeclarationList(params);
    :}
    |
    {: RESULT = new ParamDeclarationList(new ArrayList<ParamDeclaration>()); :};

remaining_param_list ::= COMMA param_decl:pd remaining_param_list:rpl
                    {:
                        rpl.add(pd);
                        RESULT = rpl;
                    :}
                    |
                    {: RESULT = new ArrayList<ParamDeclaration>(); :}
                    ;

statement_list ::= statement:s statement_list:sl
                   {:
                       sl.add(0, s);
                       RESULT = sl;
                   :}
                   |
                   {: RESULT = new ArrayList<Statement>(); :}
                   ;

statement ::= vardecl:v SEMICOLON {: RESULT = v; :}
              |
              IDENTIFIER:i EQUALS expression:e SEMICOLON {: RESULT = new Assign(i, e); :}
              ;

vardecl ::= type:t IDENTIFIER:i {: RESULT = new VariableDeclaration(t, i); :};

expression ::= expression:lhs PLUS expression:rhs {: RESULT = new Add(lhs, rhs); :}
               |
               IDENTIFIER:i {: RESULT = i; :};
